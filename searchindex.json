{"categories":[],"posts":[{"content":"","id":0,"section":"posts","summary":"","tags":null,"title":"Posts","uri":"https://juzhencs.github.io/posts/","year":"2019"},{"content":" vEB tree算法简介 vEB tree是VAN EMDE BOAS Tress的缩写，是一种 时间复杂度为O(lglgU) 的查找算法。基于比较操作的查找算法最佳时间复杂度为O(lgn)，vEB tree算法借用了一些 位操作 的技巧，将时间复杂度降低为O(lglgn)，所以在问题规模相对问题空间较大的情况下有较好的表现。它是由一个荷兰计算机学家Peter van Emde Boas领导的团队在1975年发明的。参考文献如下，如果链接过期了的话也可以根据论文名字重新搜索。\nvan Emde Boas, Peter. \u0026ldquo;Preserving order in a forest in less than logarithmic time.\u0026rdquo; 16th Annual Symposium on Foundations of Computer Science (sfcs 1975). IEEE, 1975.\n另外作者在1977年改进了算法，将空间复杂度降低为线性，参考文献如下。\nvan Emde Boas, Peter. \u0026ldquo;Preserving order in a forest in less than logarithmic time and linear space.\u0026rdquo; Information processing letters 6.3 (1977): 80-82.\n引子:传统的二分查找  问题:\n给定一个递增的序列x[n]，用二分查找数值a是否存在序列当中。\n解答：\n1. 取序列二分点的数值和a对比，如果二分点的数值等于a，或序列长度为1则结束。\n2. 如果二分点大于a，则去掉序列后半段，否则去点序列前半段，返回1步。\n 以上就是典型的二分查找，每次都把序列对半分，直到序列长度为1，最坏的情况下可能操作x次。即:\n$$n(\\frac{1}{2})^x=1$$\n显然:\n$$x=log_2^n$$\n接下来思考一个问题， 如果每次不是二分，而是多分 是不是可以算的更快呢？\nvEB tree算法 数据存储在计算机当中是二进制的，计算机对数据的运算最终都是执行一些位操作。如果考虑位操作的话，其实每次是可以将数据$\\sqrt n$分的。考虑数字16，可以分解为4x4，4是$2^2$二进制是0B 100，16是$2^4$二进制表示是0B 10000，刚好是0B 100乘方的结果。\n假设有为0-15，共16个数，那么把这16个数全部用二进制表示如下：\n             十进制 0 1 2 3   二进制 00 00 00 01 00 10 00 11   十进制 4 5 6 7   二进制 01 00 01 01 01 10 01 11   十进制 8 9 10 11   二进制 10 00 10 01 10 10 10 11   十进制 12 13 14 15   二进制 11 00 11 01 11 10 11 11     可以看到如果把二进制表示的数前后各两个比特位拆开，前两个比特位相同的数字合为一段，可以把大小为16的空间拆分成$\\sqrt16$即4段。后两个比特位则可以表示数字在段当中的位置。比如数字9，拆分后，属于0B 10段，在段中的0B 01位。\n另外再说明一下问题空间U和问题规模n，如上述例子，所有的数都在0-15范围内，问题空间U就是16。假设查找其中的2、4、11，三个数，问题规模n就是3。\n现在vEB tree的核心思想就可以理解了，将要查找的数据按照二进制对半分(高位补零)，前半部分为段值，后半部分为段内的位置。再段内位置作为问题空间递归的查找下去，直到找到或者问题空间大小为2为止。\n举个例子，问题空间为256，查找数字7。二进制7为0B 0000 0111(高位补零)，首次查找在0B 0000段，段内0B 0111位置。将段内位置作为问题空间递归查找，二次查找在0B 01段，段内0B 11位置。三次查找，在0B 1段，段内0B 1位置。查找结束。\n以上就是最朴素的vEB tree思想的查找方法，每次都把问题空间开方分，直到问题空间为2，最坏的情况下可能操作x次。即:\n$$U^{\\frac{1}{2^x}}=2$$\n显然:\n$$x=log_2^{log_2^U}$$\nvEB tree的数据结构 vEB tree是递归定义的，所以实际上vEB tree的数据结构很简单，只需要理解一个节点就可以了。\n一个节点就是一个$\\sqrt U$叉树，每个分支就是一个段，分支的值是一个指针，指向下一级节点。\n每个节点包含两个特殊变量，最大值和最小值，表示这个节点以及它之下子节点存储的值当中的最大和最小值，如果是负数，则表示这个节点是空节点。\n 节点{\n\u0026ensp; 最大值\n\u0026ensp; 最小值\n\u0026ensp; 子节点1\n\u0026ensp; \u0026hellip;\n\u0026ensp; 子节点n\n}\n 以上就是vEB tree的基本思想，更详细的介绍可以参考机械工业出版社的《算法导论》。\nvEB tree的基本操作时间复杂度都是O(lglgU)，所以对于在问题空间当中分布密集的数据有很好的表现。不过由于关键字限制在0-U之间，所以实际应用范围有限。\n另外现在看起来vEB tree的空间复杂度是O(U)，实际上通过哈希，可以降低到O(n)。\n","id":1,"section":"posts","summary":"vEB tree算法简介 vEB tree是VAN EMDE BOAS Tress的缩写，是一种 时间复杂度为O(lglgU) 的查找算法。基于比较操作的查找算法最佳时间复杂度","tags":null,"title":"vEB tree算法简介","uri":"https://juzhencs.github.io/2019/10/2019-10-26/","year":"2019"},{"content":" 最长回文子串(Manacher)算法朴实理解 今天找求解最长回文子串的算法，发现居然有O(n)复杂度的解法。必须找博客拜读一下。\n然而大神们的博客都写得太学术了，欺负我智商低。像大唐白居易一样，写的诗老妪能解多好。(典故出自一些笔记小说，实际信不得的)\n作为一个笨人，整理一个自己的朴实理解的版本，希望对大家有帮助。\n预处理 假设有串S = \u0026ldquo;12321\u0026rdquo;，求他的最长回文子串。\n首先在串的中间(包括首尾)加特殊字符，只要是串里本来没有的字符就行。于是\nS = \u0026ldquo;#1#2#3#2#1#\u0026rdquo;\n子串长度数组P 建立一个数组P，P和串S长度一样。P[i]的值就是以S[i]为中心的最长子串的半径。\n举个栗子：\nS = \u0026ldquo;# 1 # 2 # 3 # 2 # 1 #\u0026rdquo;\nP = [0 1 0 1 0 5 0 1 0 1 0]\n显然，最大的P[i]对应的S[i]的最大回文子串，就是要求的S的最大回文子串。\n求解数组P 首先非常朴实的求解，也就是遍历S[i]的左右，看是否相等，得到以下结果。\n S = \u0026ldquo;# 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 #\u0026rdquo;\nP = [0 1 0 1 0 1 0 1 0 9 \u0026hellip;]\n 算到这就可以偷懒了。\n我们已经知道了以5为中心，左右9的范围，是一个回文子串，我们叫这个范围为已知范围。\n考虑一下5右边的#，我们叫它\u0026rdquo;小右\u0026rdquo;，它在已知范围，最长回文子串长度未知。\n考虑一下5左边的#，我们叫它\u0026rdquo;小左\u0026rdquo;，它在已知范围，最长回文子串长度已知。\n\u0026ldquo;小右\u0026rdquo;和\u0026rdquo;小左\u0026rdquo;是对称的，它们的最长回文子串长度自然也是相同的。\n所以 \u0026ldquo;小右\u0026rdquo;的最长回文子串长度不用算。 照抄\u0026rdquo;小左\u0026rdquo;的就行。\n继续偷懒，得到以下结果。\n S = \u0026ldquo;# 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 #\u0026rdquo;\nP = [0 1 0 1 0 1 0 1 0 9 0 1 0 1 0 1 0 \u0026hellip;]\n 偷懒这里要停一下了，即将计算1的最长回文子串长度。\n如果继续偷懒，1还在已知范围，但1的最长回文子串边界和已知范围的边界有重合了。\n在这种情况下就要朴实的计算1的最长回文子串。\n S = \u0026ldquo;# 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 #\u0026rdquo;\nP = [0 1 0 1 0 1 0 1 0 9 0 1 0 1 0 1 0 16 \u0026hellip;]\n 现在已知范围更新为以1为中心的，左右16的范围了。然后又可以愉快的偷懒了。\n重复这种朴实计算，然后偷懒，不能偷懒就朴实计算，然后再偷懒的过程，得到最终结果。\n S = \u0026ldquo;# 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 #\u0026rdquo;\nP = [0 1 0 1 0 1 0 1 0 9 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 9 0 1 0 1 0 1 0 1 0]\n 总结算法 Manacher算法的核心就是计算子串长度数组P。亮点是利用已知信息在计算过程中偷懒。\n朴实的理解过程如下：\n 从0开始计算P[i]，并设定已知范围。\n 如果以P[i]为中心，P[i]在已知范围内的对应点的最长子串半径为半径。  ","id":2,"section":"posts","summary":"最长回文子串(Manacher)算法朴实理解 今天找求解最长回文子串的算法，发现居然有O(n)复杂度的解法。必须找博客拜读一下。 然而大神们的博","tags":null,"title":"最长回文子串(Manacher)算法的朴实理解","uri":"https://juzhencs.github.io/2018/07/2018-07-31/","year":"2018"},{"content":" 软件开发的一些建议 最近在机缘巧合下看到了几个关于软件开发的观点. 虽然都是别人的观点,但是我很认同,记录下来,方便以后查看.\n新人代码的极限 新人开发一个项目,那么这个项目大小的极限大概在1500行代码左右.\n这是因为在1500行代码之前,不需要什么设计模式,模块化编程,面向对象等等. 不论代码有多烂,1500行内的代码复杂度总不会太高.硬凭记忆和智商能理解的了.\n突破了1500极限需要模块化,面向对象等等方法.下一个极限会在2w行左右到来. 突破2w行极限,需要面向接口编程,设计模式等方法. 再下一个极限在20w左右,不过我不知道是不是真的.\n总之写大项目的核心就是:\u0026ldquo;让代码的复杂度,随行数线性而不是指数增加.\u0026rdquo;\n写出可维护代码的理论 很多科班出身的人,算法很好,然而代码很烂,比如我. 写出可维护的代码基本论文有三个:\n 坚持简单原则\n 可维护需要在项目一开始就考虑\n 只遵循一套原则(规范)\n  理论很简单,结合实际理解一下的话,就是:\n代码单元越小越好,不超过15行最好.方便复用.\n代码单元越简单越好,最好分支不超过4个.方便修改测试.\n不写重复代码,即6行或以上相同的代码.方便源码定位.\n保持接口简单,参数不要超过4个.简单上下文易重用和理解.\n分离模块间的关注点,类不要太大.体积小耦合就小.\n用消息共享内存,消息传共享内存的指针.避免锁.\n开发和测试尽量自动化.省钱省时间.\n坚持不信任原则 从输入到输出,处处设防,可以提高代码的健壮性.\n输入是不是空,长度是否符合,内容是否安全等\n服务本身不可信,要监控请求量,成功量,失败量,关键节点可用等.\n依赖系统不可信,关键路径要备份.派票系统数据库要备份.\n请求不可信,要做ip鉴权,白名单,限制最大请求量等.\n机器不可信,宕机时刻会发生,要有容灾和心跳检测.\n网络不可信,这个大家都知道.\n人不可信,防止人乱操作.要做好日志,备份,回滚.\n","id":3,"section":"posts","summary":"软件开发的一些建议 最近在机缘巧合下看到了几个关于软件开发的观点. 虽然都是别人的观点,但是我很认同,记录下来,方便以后查看. 新人代码的极限 新人","tags":null,"title":"软件开发的一些建议","uri":"https://juzhencs.github.io/2018/07/2018-07-04/","year":"2018"},{"content":" Deamon Sync使用教程-同步相片和文件到本地 Daemon Sync介绍 Daemon Sync能够将手机中的相片或者其他应用同步到本地服务器上.它跨平台的,服务端可以安装在linux macos windows上,客户端可以安装在安卓和iso上. Daemon Sync由Daemon Tools团队开发,不过并不收费.据他们官网上的介绍是这是一款情怀软件,所以大家可以免费使用. 个人觉得不排除未来新版本收费的可能,不过现在的版本许可证是无限期的,而且也很好用,未来收费的话就不升级呗.\n百度一下就能找到官网下载了,就不放连接了. 因为是情怀软件,所以不像商业软件那样有漂亮的文档. 我用的是linux,而官网并没有linux安装教程,折腾出来之后做个linux下的安装记录,方便和我一样的兄dei们少走弯路吧. (不过windows和mac应该是有的吧.)\n本文没有windows和mac服务端的安装介绍,不过你可以参考linux的安装方式.\nDaemon Sync在linux下服务端安装过程 我的安装环境是ubuntu16.04的docker镜像,虽然我是把它跑在docker里的,但是和用原生用ubuntu应该也是一样的.\nDaemon Sync不支持ipv6.(ipv6基本都是公网嘛,不安全)\nDaemon Sync当前版本客户端只能上传,不能删除服务端的数据.\n 在官网下载linux安装包\n 安装这个包\nsudo dpkg -i daemonsync*.deb //dpkg -i安装软件  运行deamonsync\n/etc/init.d/daemonsync start //start运行stop停止status查看状态  浏览器打开127.0.0.1:8084,进入配置界面,配置一下开始使用吧.\n  Daemon Sync的客户端使用  下载Daemon Sync软件(安卓在google play,ios在app store)\n 保证和服务器在同一个局域网,注意要ipv4的,ipv6不支持.\n 开始使用吧.\n  Trouble Shoot  运行sudo dpkg -i daemonsync*.deb遇到:could not determine current runlevel提示:\nsuod export RUNLEVEL=1 //设置runlevel变量,解决提示:could not determine current runlevel的问题 sudo -E dpkg -i daemonsync*.deb //-E表示传递用户变量给root,dpkg -i安装软件  浏览器打不开配置页面或者加载慢:\n/etc/init.d/daemonsync status //查看服务是否在运行,没运行就start起来  用服务器的本机浏览器打开配置页面,不要用手机或者平板端浏览器.\n  ","id":4,"section":"posts","summary":"Deamon Sync使用教程-同步相片和文件到本地 Daemon Sync介绍 Daemon Sync能够将手机中的相片或者其他应用同步到本地服务器上.它跨平台的,服务端可以安装","tags":null,"title":"Deamon Sync使用教程-同步相片和文件到本地","uri":"https://juzhencs.github.io/2018/04/2018-04-15/","year":"2018"},{"content":" ps2avrGB键盘刷QMK固件  先聊点题外话，鬼知道为什么我就进了客制化的大坑。\n如果是新人，请记得我的经验：客制化不省钱！客制化让键盘适应你，而不是你适应键盘！\nps2avrGB是韩国人开发的主控套件，国内也有很多人用这个做了定制化的开发，比如麦田外设的板子。（pcb上有mt字样）\nps2avrGB的官方刷板应用是BootmapperClient，github上luizribeiro为它做了qmk的适配。\nqmk顶顶大名，就不用多介绍了，基于chibiOS系统，支持模拟鼠标，可以一键进入刷机模式。总之功能特别强大！\n没错！你的键盘里跑着一个操作系统！！！还能代替鼠标！！！\n我买的是麦田的白色pcb的gh60板子，所以我只能以这个为例，记录下刷板子的过程。\n我的板子没上灯，所以关于灯光的设置都没有，如果你看得懂qmk文档可以自己加灯光配置。\n本文会默认读者已经有了一定的动手能力。毕竟你都搞客制化了，哪有纯菜鸟会玩这个？对吧。\n本文会默认读者能读懂英文教程，别怕，翻译软件站在你身后！\n 动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！\n动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！\n动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！\n如果真的发生的悲剧，键盘变砖，你可以在github上给qmk提issue。\n但是我不会对此负责，也不保证能帮助你修复键盘\n今天是2018-01-26，如果时间过去太久这个教程可能已经失效了\n刷板子准备 在刷板子之前需要做好如下的准备：\n 1.把github上的luizriberiro的qmk项目clone到本地，并且配置好编译环境。\n 2.下载BootmapperClient，最新的版本最好。\n 3.找到进入键盘刷机模式(DFU模式)的方法。\n  qmk的开发环境我是在ubuntu环境下搭建的，qmk有详细教程，只要搭建好编译环境就可以，不用管烧录工具。\n我的bootmapperClient版本是v0.10.0\nps2avrGB进入刷机模式通常有两种：\n韩国的键盘是断开连接线，按住左ctrl或者U或者esc，然后再连接。\n一些国内客制化键盘是断开连接线，短接电路板上的两个接口，再连接。\n我的pcb是要短接电路板的，在电路板侧边缘有标p1的两个接口，我用镊子短接。\n一定注意不能用usb扩展口接键盘，电脑识别不出来的。\n进入刷机模式成功的标志就是连接电脑之后，键盘所有按键都没反应，变砖是部分按键没反应。\n生成刷机文件步骤 首先要修改qmk的代码以适配自己的键盘配列表。\n首先编辑config.h,适配键盘的配列。\n在#endif前添加如下内容：\n/* mouse settings*/ //定义模拟鼠标参数，单位毫秒 #define MOUSEKEY_DELAY 150 //鼠标连续移动延迟，过大笨拙，过小发飘 #define MOUSEKEY_INTERVAL 20 //鼠标刷新间隔 #define MOUSEKEY_MAX_SPEED 2 //鼠标最大速度 #define MOUSEKEY_TIME_TO_MAX 2 //鼠标到达最大速的时间 #define MOUSEKEY_WHEEL_MAX_SPEED 2 //鼠标滚轮最大速度 #define MOUSEKEY_WHEEL_TIME_TO_MAX 2 //鼠标滚轮到达最大速度的时间  再编辑ps2avrGB.h文件，适配键盘的配列。\n在#endif前添加如下内容：\n#define MY_KEYMAP( \\ K31, K32, K33, K34, K35, K36, K37, K38, K39, K3A, K3B, K3C, K3D, K3F, \\ K41, K42, K43, K44, K45, K46, K47, K48, K49, K4A, K4B, K4C, K4D, K4E, \\ K51, K52, K53, K54, K55, K56, K57, K58, K59, K5A, K5B, K5C, K5E, \\ K61, K63, K64, K65, K66, K67, K68, K69, K6A, K6B, K6C, K6E, \\ K71, K72, K73, K78, K7A, K7B, K7D, K7E \\ ){ \\ { KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO }, \\ { KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO }, \\ { KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO }, \\ { K31, K32, K33, K34, K35, K36, K37, K38, K39, K3A, K3B, K3C, K3D, KC_NO, K3F }, \\ { K41, K42, K43, K44, K45, K46, K47, K48, K49, K4A, K4B, K4C, K4D, K4E, KC_NO }, \\ { K51, K52, K53, K54, K55, K56, K57, K58, K59, K5A, K5B, K5C, KC_NO, K5E, KC_NO }, \\ { K61, KC_NO, K63, K64, K65, K66, K67, K68, K69, K6A, K6B, K6C, KC_NO, K6E, KC_NO }, \\ { K71, K72, K73, KC_NO, KC_NO, KC_NO, KC_NO, K78, KC_NO, K7A, K7B, KC_NO, K7D, K7E, KC_NO } \\ }  配置的方法其实挺简单的。格式如下：\n#define MY_KEYMAP( \\ K11, K12, K13, \\ K21, K23 \\ ){ \\ { KC_11, KC_12, KC_13 }, \\ { KC_21, KC_NO, KC_23 } \\ }  上面的矩阵是我们的键盘轴排列方式，下面的矩阵是这些轴焊接在了哪里。\n比如我们设置了一个2x3的键盘矩阵，在上面焊了五个轴，排列如第一个矩阵。\n在第二个矩阵一一对应的，配置轴焊接的位置，没有焊轴的位置用NO占位。\n以上是我的怕pcb的布局，每个人习惯不同，布局都不同，可能需要微调。\n建立/root/qmk/qmk_firmware/keyboards/ps2avrGB/keymaps/mykeymap文件夹，最后的mykeymap可以任意改名。\n进入新建的文件夹，建立keymap.c文件。内容如下：\n#include \u0026quot;ps2avrGB.h\u0026quot; #include \u0026quot;action_layer.h\u0026quot; #include \u0026quot;rgblight.h\u0026quot; const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { [0] = MY_KEYMAP( KC_ESC, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_MINS, KC_EQL, KC_BSPC, KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_LBRC, KC_RBRC, KC_BSLS, KC_LCTL, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT, KC_ENT, KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_FN0, KC_FN1, KC_RGUI, KC_LALT, KC_SPC, KC_FN2, KC_APP, KC_CAPS, KC_INS ), [1] = MY_KEYMAP( KC_GRV, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11, KC_F12, KC_DEL, KC_TRNS, KC_TRNS, KC_TRNS, KC_PGUP, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_HOME, KC_PGDN, KC_END, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS ), [2] = MY_KEYMAP( KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LEFT, KC_DOWN, KC_UP, KC_RGHT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS ), [3] = MY_KEYMAP( RESET, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_WH_U, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_MS_U, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_BTN2, KC_WH_D, KC_BTN1, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_MS_L, KC_MS_D, KC_MS_R, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS ), }; const uint16_t PROGMEM fn_actions[] = { [0] = ACTION_LAYER_MOMENTARY(1), [1] = ACTION_LAYER_MOMENTARY(2), [2] = ACTION_LAYER_MOMENTARY(3), };  这里的键位设置是和ps2avrGB.h里的设置对应的。应该很容易看懂。\n默认键盘在第0层状态，按下FN0键进入第一层，按下FN1进入第二层，以此类推。\nKC_TRNS表示透明，比如字母K键。按下FN1和K键，从第0层进入第2层，KC_TRNS会透明映射到下面第0层，输出还是K。\nKC_MS_L就是鼠标模拟向左移动，具体的keycode可以参考qmk的keycode文档。\n第三层的左上角RESET键表示进入刷机(DFU)模式，有了这个键就不用每次都短接了。\n最后回到qmk_firmware,执行下面的命令：\nmake ps2avrGB  大概会有一个这样的回显：\nMaking ps2avrGB with keymap default [OK] Making ps2avrGB with keymap luizribeiro [OK] Making ps2avrGB with keymap mykeyboard [OK]  成功之后会生成ps2avrGB_mykeyboard.hex文件，就是我们的目标文件了。\n刷板子步骤 刷板子我是在windows平台上进行的，linux当然也可以，不过我没成功。\n通过按键或者短接，让键盘的板子进入刷机模式，连接电脑，打开bootmapperClient。\n右上角选option，左下角的utils里点firm up，弹出的窗口中选中ps2avrGB_mykeyboard.hex，刷机开始。\n没问题的话会弹出一个对话框，在跑马灯显示一堆二进制地址，不到10秒对话框消失，刷机完成。\n如果刷机成功，以后再刷的时候按reset键就可以进去刷机模式了，不用每次都短接。\n第一次配列肯定是会有问题的，用一段时间发现不方便再改，慢慢你的键盘就会进化出最适合你的配列。\n可能会遇到的问题 可能会遇到的最大的问题就是运气问题，我的板子变砖过，连上电脑不识别过。\n装驱动把其他设备驱动装坏过，编译debug一天没成果过。\n不过基本都是因为小问题，运气好的话是不会遇到的。\n运气不好的话，恭喜你！因为专家就是把能遇到的问题都遇到了一遍的人。\n","id":5,"section":"posts","summary":"ps2avrGB键盘刷QMK固件 先聊点题外话，鬼知道为什么我就进了客制化的大坑。 如果是新人，请记得我的经验：客制化不省钱！客制化让键盘适应你","tags":null,"title":"ps2avrGB键盘刷QMK固件","uri":"https://juzhencs.github.io/2018/02/2018-01-26/","year":"2018"},{"content":" 如何写一篇科学论文  实际上这是在听了钟润阳老师的报告后觉得受益匪浅，然后按照钟老师的ppt重写的文章。这么长时间过去，有点记不清钟老师对传播报告的内容是否支持了。我十分感谢钟老师做这次报告，如果知道了钟老师不支持这种分享方式我会第一时间删除这篇博客。\n 一篇文章的结构  Titles 标题\n Abstract 摘要\n Introduction 介绍\n Literature Review 文献评论\n Case Study 案例分析\n Conclusion 结论\n Acknowledgement 确认\n References 参考文献\n Appendix 附录\n  如何选题 可以看一些文章，找一些问题，甚至之前工作的结果。然后进行头脑风暴，看哪里还可以完善。把内容写在一张纸上。找几个同学或者同事，对这些内容做一个评判。如果大家普遍认为这个脑洞开的好，就可以发文章。\n 一篇文章开三个脑洞就差不多了\n 如果是新观点，要想好名字，或者看看国内外同行怎么命名这个新观点\n 对于新观点要至少找到三个点，来证明它是新颖的\n  文章的主题分类 通常文章可以分为三类：\n 原始创新\n这类创新是最不容易出现的，比如开创一个领域的相对论。是科研狗的最高目标。\n 细节补充\n在大牛开创了领域之后，进行一些查缺补漏。比如有人提出孩子的身高和父母的遗传有关系，跟着可以发一篇文章。“我发现确实有关系，关系权重在10%到90%之间。”俗称跟班科研，是最容易水文章的方法。\n 新来源的创新\n这种创新实际上是垄断创新，比如探月计划可以出一大批文章，因为数据有了新的来源。如果自己有了新的实验来源而又不能垄断的话，就要学会隐藏数据来源了。\n 自己工作的跟进\n自己在做了一些工作之后，总有一些是还可以深入做，但是当时没时间或者精力做的。有条件之后把这些工作继续做下去，也是文章的来源。\n  Title and Abstract 标题和摘要  文章的标题要能够表达文章的所有的点\n一个好的标题能够一定程度上代替整篇文章，有一种成语的效果。坏的标题比如：基于xx方法的改进方法。好的标题比如：xx方法的yy改进。\n 摘要是对标题的扩充。\n摘要是对文章的引领，通常在标题定下之后摘要就该写出来了，而不是在最后的总结。\n  Introduction 介绍 实际文章都是套路，介绍的套路就是如下，可以用一段来写。下面每个点用一句或者两句话来写明白。\n 这篇文章要解决什么问题\n 这个问题为什么重要，或者说为什么这是个要解决的问题 对于这个问题，过去人们做了什么，以及剩下什么还没解决\n 必须要进一步做什么，本文的重点是什么(研究问题)，也可以加上本文不会涉及什么\n 本文旨在实现或者贡献什么(目的和目标)\n  大家要注意，写文章的根本目的是分享自己的想法，推动世界进步，所以一定要有贡献，否则文章是没有以意的。\n 如何实现这个目标(用非常简单的一句话表达，最好只使用简单的主谓宾句)\n 论文是如何组织的(不一定要有，推荐有)\n 引用名人名言(引用专家的话，其他权威的论文等等)\n  学术的圈子很小很深，审稿人很可能不懂文章所写的东西。这时可以引用一些公共权威来证明自己。比如在深度学习领域，引用hinton的文章证明自己的观点，审稿人就不敢轻易反对。每提到一个观点都要有参考文献对应。\nConclusion 总结  回顾这个问题为什么是新颖的，重要的\n 回顾一下自己的解决方法的好处，新颖性\n 总结结果的有效性，解释下原因\n 提出改进或扩展的方向\n要注意，不是提出未完成的工作，是再已完成的工作的基础上的扩展  ","id":6,"section":"posts","summary":"如何写一篇科学论文 实际上这是在听了钟润阳老师的报告后觉得受益匪浅，然后按照钟老师的ppt重写的文章。这么长时间过去，有点记不清钟老师对传播报","tags":null,"title":"如何写一篇科学论文","uri":"https://juzhencs.github.io/2018/02/2018-02-01/","year":"2018"},{"content":" 给go get加进度条 go get的时候没有回显，实验室网又慢，看着一行命令很长时间不动挺按难受的，就想着能不能加个进度条。谷歌了一下，4年前就已经有大神实现了。\n让go get显示进度条(博客可能已经过期了)\n作为萌新，按着大神的方法也实现了这个功能，而且大神把原理说的非常清楚明白，感谢!!!\n大神思路很简单：\n 修改cmd.Run()执行的地方, 使其将输出定位到标准输出流上\n  重新记录一下我的操作过程，详细一些，方便和我一样的萌新们。\n我的版本是：go1.9.2\n编辑/usr/local/go/src/cmd/go/internal/get/vcs.go。\ncmd.Stdout = \u0026amp;buf cmd.Stderr = \u0026amp;buf //添加cmd.Stdout = os.Stdout //添加cmd.Stderr = os.Stderr  成\ncmd.Stdout = \u0026amp;buf cmd.Stderr = \u0026amp;buf cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr  然后跑一遍/usr/local/go/src/run.bash\n之后运行go get就有回显了\nCloning into '/root/go/src/github.com/go-redis/redis'... remote: Counting objects: 4026, done. remote: Compressing objects: 100% (18/18), done. Receiving objects: 69% (2784/4026), 1.14 MiB | 8.00 KiB/s  ","id":7,"section":"posts","summary":"给go get加进度条 go get的时候没有回显，实验室网又慢，看着一行命令很长时间不动挺按难受的，就想着能不能加个进度条。谷歌了一下，4年前就已","tags":null,"title":"给go get加进度条","uri":"https://juzhencs.github.io/2018/01/2018-01-19/","year":"2018"}],"tags":[]}