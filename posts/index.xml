<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ju Zhen&#39;s Blog</title>
    <link>http://juzhencs.github.io/posts/</link>
    <description>Recent content in Posts on Ju Zhen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Oct 2019 16:11:12 +0800</lastBuildDate>
    
        <atom:link href="http://juzhencs.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vEB tree算法简介</title>
      <link>http://juzhencs.github.io/posts/2019-10-26/</link>
      <pubDate>Sat, 26 Oct 2019 16:11:12 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2019-10-26/</guid>
      <description>vEB tree算法简介 vEB tree是VAN EMDE BOAS Tress的缩写，是一种 时间复杂度为O(lglgU) 的查找算法。基于比较操作的查找算法最佳时间复杂度为O(lgn)，vEB tree算法借用了一些 位操作 的技巧，将时间复杂度降低为O(lglgn)，所以在问题规模相对问题空间较大的情况下有较好的表现。它是由一个荷兰计算机学家Peter van Emde Boas领导的团队在1975年发明的。参考文献如下，如果链接过期了的话也可以根据论文名字重新搜索。
van Emde Boas, Peter. &amp;ldquo;Preserving order in a forest in less than logarithmic time.&amp;rdquo; 16th Annual Symposium on Foundations of Computer Science (sfcs 1975). IEEE, 1975.
另外作者在1977年改进了算法，将空间复杂度降低为线性，参考文献如下。
van Emde Boas, Peter. &amp;ldquo;Preserving order in a forest in less than logarithmic time and linear space.&amp;rdquo; Information processing letters 6.3 (1977): 80-82.
引子:传统的二分查找  问题:
给定一个递增的序列x[n]，用二分查找数值a是否存在序列当中。</description>
    </item>
    
    <item>
      <title>最长回文子串(Manacher)算法的朴实理解</title>
      <link>http://juzhencs.github.io/posts/2018-07-31/</link>
      <pubDate>Tue, 31 Jul 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-07-31/</guid>
      <description>最长回文子串(Manacher)算法朴实理解 今天找求解最长回文子串的算法，发现居然有O(n)复杂度的解法。必须找博客拜读一下。
然而大神们的博客都写得太学术了，欺负我智商低。像大唐白居易一样，写的诗老妪能解多好。(典故出自一些笔记小说，实际信不得的)
作为一个笨人，整理一个自己的朴实理解的版本，希望对大家有帮助。
预处理 假设有串S = &amp;ldquo;12321&amp;rdquo;，求他的最长回文子串。
首先在串的中间(包括首尾)加特殊字符，只要是串里本来没有的字符就行。于是
S = &amp;ldquo;#1#2#3#2#1#&amp;rdquo;
子串长度数组P 建立一个数组P，P和串S长度一样。P[i]的值就是以S[i]为中心的最长子串的半径。
举个栗子：
S = &amp;ldquo;# 1 # 2 # 3 # 2 # 1 #&amp;rdquo;
P = [0 1 0 1 0 5 0 1 0 1 0]
显然，最大的P[i]对应的S[i]的最大回文子串，就是要求的S的最大回文子串。
求解数组P 首先非常朴实的求解，也就是遍历S[i]的左右，看是否相等，得到以下结果。
 S = &amp;ldquo;# 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 # 2 # 3 # 4 # 5 # 4 # 3 # 2 # 1 #&amp;rdquo;</description>
    </item>
    
    <item>
      <title>软件开发的一些建议</title>
      <link>http://juzhencs.github.io/posts/2018-07-04/</link>
      <pubDate>Wed, 04 Jul 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-07-04/</guid>
      <description>软件开发的一些建议 最近在机缘巧合下看到了几个关于软件开发的观点. 虽然都是别人的观点,但是我很认同,记录下来,方便以后查看.
新人代码的极限 新人开发一个项目,那么这个项目大小的极限大概在1500行代码左右.
这是因为在1500行代码之前,不需要什么设计模式,模块化编程,面向对象等等. 不论代码有多烂,1500行内的代码复杂度总不会太高.硬凭记忆和智商能理解的了.
突破了1500极限需要模块化,面向对象等等方法.下一个极限会在2w行左右到来. 突破2w行极限,需要面向接口编程,设计模式等方法. 再下一个极限在20w左右,不过我不知道是不是真的.
总之写大项目的核心就是:&amp;ldquo;让代码的复杂度,随行数线性而不是指数增加.&amp;rdquo;
写出可维护代码的理论 很多科班出身的人,算法很好,然而代码很烂,比如我. 写出可维护的代码基本论文有三个:
 坚持简单原则
 可维护需要在项目一开始就考虑
 只遵循一套原则(规范)
  理论很简单,结合实际理解一下的话,就是:
代码单元越小越好,不超过15行最好.方便复用.
代码单元越简单越好,最好分支不超过4个.方便修改测试.
不写重复代码,即6行或以上相同的代码.方便源码定位.
保持接口简单,参数不要超过4个.简单上下文易重用和理解.
分离模块间的关注点,类不要太大.体积小耦合就小.
用消息共享内存,消息传共享内存的指针.避免锁.
开发和测试尽量自动化.省钱省时间.
坚持不信任原则 从输入到输出,处处设防,可以提高代码的健壮性.
输入是不是空,长度是否符合,内容是否安全等
服务本身不可信,要监控请求量,成功量,失败量,关键节点可用等.
依赖系统不可信,关键路径要备份.派票系统数据库要备份.
请求不可信,要做ip鉴权,白名单,限制最大请求量等.
机器不可信,宕机时刻会发生,要有容灾和心跳检测.
网络不可信,这个大家都知道.
人不可信,防止人乱操作.要做好日志,备份,回滚.</description>
    </item>
    
    <item>
      <title>Deamon Sync使用教程-同步相片和文件到本地</title>
      <link>http://juzhencs.github.io/posts/2018-04-15/</link>
      <pubDate>Sun, 15 Apr 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-04-15/</guid>
      <description>Deamon Sync使用教程-同步相片和文件到本地 Daemon Sync介绍 Daemon Sync能够将手机中的相片或者其他应用同步到本地服务器上.它跨平台的,服务端可以安装在linux macos windows上,客户端可以安装在安卓和iso上. Daemon Sync由Daemon Tools团队开发,不过并不收费.据他们官网上的介绍是这是一款情怀软件,所以大家可以免费使用. 个人觉得不排除未来新版本收费的可能,不过现在的版本许可证是无限期的,而且也很好用,未来收费的话就不升级呗.
百度一下就能找到官网下载了,就不放连接了. 因为是情怀软件,所以不像商业软件那样有漂亮的文档. 我用的是linux,而官网并没有linux安装教程,折腾出来之后做个linux下的安装记录,方便和我一样的兄dei们少走弯路吧. (不过windows和mac应该是有的吧.)
本文没有windows和mac服务端的安装介绍,不过你可以参考linux的安装方式.
Daemon Sync在linux下服务端安装过程 我的安装环境是ubuntu16.04的docker镜像,虽然我是把它跑在docker里的,但是和用原生用ubuntu应该也是一样的.
Daemon Sync不支持ipv6.(ipv6基本都是公网嘛,不安全)
Daemon Sync当前版本客户端只能上传,不能删除服务端的数据.
 在官网下载linux安装包
 安装这个包
sudo dpkg -i daemonsync*.deb //dpkg -i安装软件  运行deamonsync
/etc/init.d/daemonsync start //start运行stop停止status查看状态  浏览器打开127.0.0.1:8084,进入配置界面,配置一下开始使用吧.
  Daemon Sync的客户端使用  下载Daemon Sync软件(安卓在google play,ios在app store)
 保证和服务器在同一个局域网,注意要ipv4的,ipv6不支持.
 开始使用吧.
  Trouble Shoot  运行sudo dpkg -i daemonsync*.deb遇到:could not determine current runlevel提示:
suod export RUNLEVEL=1 //设置runlevel变量,解决提示:could not determine current runlevel的问题 sudo -E dpkg -i daemonsync*.</description>
    </item>
    
    <item>
      <title>ps2avrGB键盘刷QMK固件</title>
      <link>http://juzhencs.github.io/posts/2018-01-26/</link>
      <pubDate>Mon, 26 Feb 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-01-26/</guid>
      <description>ps2avrGB键盘刷QMK固件  先聊点题外话，鬼知道为什么我就进了客制化的大坑。
如果是新人，请记得我的经验：客制化不省钱！客制化让键盘适应你，而不是你适应键盘！
ps2avrGB是韩国人开发的主控套件，国内也有很多人用这个做了定制化的开发，比如麦田外设的板子。（pcb上有mt字样）
ps2avrGB的官方刷板应用是BootmapperClient，github上luizribeiro为它做了qmk的适配。
qmk顶顶大名，就不用多介绍了，基于chibiOS系统，支持模拟鼠标，可以一键进入刷机模式。总之功能特别强大！
没错！你的键盘里跑着一个操作系统！！！还能代替鼠标！！！
我买的是麦田的白色pcb的gh60板子，所以我只能以这个为例，记录下刷板子的过程。
我的板子没上灯，所以关于灯光的设置都没有，如果你看得懂qmk文档可以自己加灯光配置。
本文会默认读者已经有了一定的动手能力。毕竟你都搞客制化了，哪有纯菜鸟会玩这个？对吧。
本文会默认读者能读懂英文教程，别怕，翻译软件站在你身后！
 动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！
动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！
动手前请先看下全文，如果大多看不懂，请不要操作，键盘会变砖的！！！
如果真的发生的悲剧，键盘变砖，你可以在github上给qmk提issue。
但是我不会对此负责，也不保证能帮助你修复键盘
今天是2018-01-26，如果时间过去太久这个教程可能已经失效了
刷板子准备 在刷板子之前需要做好如下的准备：
 1.把github上的luizriberiro的qmk项目clone到本地，并且配置好编译环境。
 2.下载BootmapperClient，最新的版本最好。
 3.找到进入键盘刷机模式(DFU模式)的方法。
  qmk的开发环境我是在ubuntu环境下搭建的，qmk有详细教程，只要搭建好编译环境就可以，不用管烧录工具。
我的bootmapperClient版本是v0.10.0
ps2avrGB进入刷机模式通常有两种：
韩国的键盘是断开连接线，按住左ctrl或者U或者esc，然后再连接。
一些国内客制化键盘是断开连接线，短接电路板上的两个接口，再连接。
我的pcb是要短接电路板的，在电路板侧边缘有标p1的两个接口，我用镊子短接。
一定注意不能用usb扩展口接键盘，电脑识别不出来的。
进入刷机模式成功的标志就是连接电脑之后，键盘所有按键都没反应，变砖是部分按键没反应。
生成刷机文件步骤 首先要修改qmk的代码以适配自己的键盘配列表。
首先编辑config.h,适配键盘的配列。
在#endif前添加如下内容：
/* mouse settings*/ //定义模拟鼠标参数，单位毫秒 #define MOUSEKEY_DELAY 150 //鼠标连续移动延迟，过大笨拙，过小发飘 #define MOUSEKEY_INTERVAL 20 //鼠标刷新间隔 #define MOUSEKEY_MAX_SPEED 2 //鼠标最大速度 #define MOUSEKEY_TIME_TO_MAX 2 //鼠标到达最大速的时间 #define MOUSEKEY_WHEEL_MAX_SPEED 2 //鼠标滚轮最大速度 #define MOUSEKEY_WHEEL_TIME_TO_MAX 2 //鼠标滚轮到达最大速度的时间  再编辑ps2avrGB.</description>
    </item>
    
    <item>
      <title>如何写一篇科学论文</title>
      <link>http://juzhencs.github.io/posts/2018-02-01/</link>
      <pubDate>Thu, 01 Feb 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-02-01/</guid>
      <description>如何写一篇科学论文  实际上这是在听了钟润阳老师的报告后觉得受益匪浅，然后按照钟老师的ppt重写的文章。这么长时间过去，有点记不清钟老师对传播报告的内容是否支持了。我十分感谢钟老师做这次报告，如果知道了钟老师不支持这种分享方式我会第一时间删除这篇博客。
 一篇文章的结构  Titles 标题
 Abstract 摘要
 Introduction 介绍
 Literature Review 文献评论
 Case Study 案例分析
 Conclusion 结论
 Acknowledgement 确认
 References 参考文献
 Appendix 附录
  如何选题 可以看一些文章，找一些问题，甚至之前工作的结果。然后进行头脑风暴，看哪里还可以完善。把内容写在一张纸上。找几个同学或者同事，对这些内容做一个评判。如果大家普遍认为这个脑洞开的好，就可以发文章。
 一篇文章开三个脑洞就差不多了
 如果是新观点，要想好名字，或者看看国内外同行怎么命名这个新观点
 对于新观点要至少找到三个点，来证明它是新颖的
  文章的主题分类 通常文章可以分为三类：
 原始创新
这类创新是最不容易出现的，比如开创一个领域的相对论。是科研狗的最高目标。
 细节补充
在大牛开创了领域之后，进行一些查缺补漏。比如有人提出孩子的身高和父母的遗传有关系，跟着可以发一篇文章。“我发现确实有关系，关系权重在10%到90%之间。”俗称跟班科研，是最容易水文章的方法。
 新来源的创新
这种创新实际上是垄断创新，比如探月计划可以出一大批文章，因为数据有了新的来源。如果自己有了新的实验来源而又不能垄断的话，就要学会隐藏数据来源了。
 自己工作的跟进
自己在做了一些工作之后，总有一些是还可以深入做，但是当时没时间或者精力做的。有条件之后把这些工作继续做下去，也是文章的来源。
  Title and Abstract 标题和摘要  文章的标题要能够表达文章的所有的点
一个好的标题能够一定程度上代替整篇文章，有一种成语的效果。坏的标题比如：基于xx方法的改进方法。好的标题比如：xx方法的yy改进。</description>
    </item>
    
    <item>
      <title>给go get加进度条</title>
      <link>http://juzhencs.github.io/posts/2018-01-19/</link>
      <pubDate>Fri, 19 Jan 2018 15:25:04 +0800</pubDate>
      
      <guid>http://juzhencs.github.io/posts/2018-01-19/</guid>
      <description> 给go get加进度条 go get的时候没有回显，实验室网又慢，看着一行命令很长时间不动挺按难受的，就想着能不能加个进度条。谷歌了一下，4年前就已经有大神实现了。
让go get显示进度条(博客可能已经过期了)
作为萌新，按着大神的方法也实现了这个功能，而且大神把原理说的非常清楚明白，感谢!!!
大神思路很简单：
 修改cmd.Run()执行的地方, 使其将输出定位到标准输出流上
  重新记录一下我的操作过程，详细一些，方便和我一样的萌新们。
我的版本是：go1.9.2
编辑/usr/local/go/src/cmd/go/internal/get/vcs.go。
cmd.Stdout = &amp;amp;buf cmd.Stderr = &amp;amp;buf //添加cmd.Stdout = os.Stdout //添加cmd.Stderr = os.Stderr  成
cmd.Stdout = &amp;amp;buf cmd.Stderr = &amp;amp;buf cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr  然后跑一遍/usr/local/go/src/run.bash
之后运行go get就有回显了
Cloning into &#39;/root/go/src/github.com/go-redis/redis&#39;... remote: Counting objects: 4026, done. remote: Compressing objects: 100% (18/18), done. Receiving objects: 69% (2784/4026), 1.14 MiB | 8.00 KiB/s  </description>
    </item>
    
  </channel>
</rss>
